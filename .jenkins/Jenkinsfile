def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def ACCTest(String label, String compiler, String build_type) {
    def c_compiler = "clang-7"
    def cpp_compiler = "clang++-7"
    stage("${label} ${compiler} SGX1FLC ${build_type}") {
        node("${label}") {
            cleanWs()
            checkout scm

            timeout(15) {
                dir('build') {
                    if (compiler == "gcc") {
                        c_compiler = "gcc"
                        cpp_compiler = "g++"
                    }
                    withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}"]) {
                        sh """
                        cmake .. -DCMAKE_BUILD_TYPE=${build_type}
                        make
                        ctest --output-on-failure
                        """
                    }
                }
            }

        }
    }
}

def simulationTest(String platform_mode, String build_type) {
    stage("Sim clang-7 ${platform_mode} ${build_type}") {
        node {
            cleanWs()
            checkout scm

            def oetoolsSim = docker.build("oetools-simulation", "-f .jenkins/Dockerfile .")
            oetoolsSim.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7","OE_SIMULATION=1"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=${build_type} -DUSE_LIBSGX=OFF
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def ACCContainerTest(String label) {
    stage("${label} Container RelWithDebInfo") {
        node("${label}") {
            cleanWs()
            checkout scm

            def oetoolsContainer = docker.build("oetools-containertest", "-f .jenkins/Dockerfile .")
            oetoolsContainer.inside('--device /dev/sgx:/dev/sgx') {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def checkDevFlows() {
    stage('Check dev flows') {
        node {
            cleanWs()
            checkout scm

            def oetoolsCheck = docker.build("oetools-check", "-f .jenkins/Dockerfile .")
            oetoolsCheck.inside {
                timeout(2) {
                    sh './scripts/check-ci'
                }
            }
        }
    }
    stage('Default compiler') {
        // This stage verifies developer flows after running ansible playbooks to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-base", '-f .jenkins/Dockerfile.scripts .')

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs ansible playbook.

                    dir('build') {
                        sh '''
                        cmake .. -DUSE_LIBSGX=OFF
                        make
                        '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def win2016LinuxElfBuild(String build_type) {
    stage("Linux SGX1 ${build_type}") {
        node {
            cleanWs()
            checkout scm
            def oetoolsWincp = docker.build("oetools-wincp", "-f .jenkins/Dockerfile .")
            oetoolsWincp.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=${build_type} -DUSE_DEBUG_MALLOC=OFF
                            make
                            """
                        }
                    }
                    stash includes: 'build/tests/**', name: "linux${build_type}"
                }
            }
        }
    }
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash "linux${build_type}"
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper("./scripts/test-build-config.ps1 -add_windows_enclave_tests -build_type ${build_type} -linux_bin_dir ${WORKSPACE}/linuxbin/tests")
       }
    }
}

def win2016CrossCompile(String build_type) {
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            PowerShellWrapper("./scripts/test-build-config.ps1 -build_type ${build_type} -build_enclaves")
       }
    }
}

parallel "Check Developer Experience" :          { checkDevFlows() },
         "Sim clang-7 SGX1 Debug" :              { simulationTest('SGX1', 'Debug')},
         "Sim clang-7 SGX1 Release" :            { simulationTest('SGX1', 'Release')},
         "Sim clang-7 SGX1 RelWithDebInfo" :     { simulationTest('SGX1', 'RelWithDebInfo')},
         "Sim clang-7 SGX1-FLC Debug" :          { simulationTest('SGX1FLC', 'Debug')},
         "Sim clang-7 SGX1-FLC Release" :        { simulationTest('SGX1FLC', 'Release')},
         "Sim clang-7 SGX1-FLC RelWithDebInfo" : { simulationTest('SGX1FLC', 'RelWithDebInfo')},
         "ACC1604 clang-7 Debug" :               { ACCTest('ACC-1604', 'clang-7', 'Debug') },
         "ACC1604 clang-7 Release" :             { ACCTest('ACC-1604', 'clang-7', 'Release') },
         "ACC1604 clang-7 RelWithDebInfo" :      { ACCTest('ACC-1604', 'clang-7', 'RelWithDebinfo') },
         "ACC1604 gcc Debug" :                   { ACCTest('ACC-1604', 'gcc', 'Debug') },
         "ACC1604 gcc Release" :                 { ACCTest('ACC-1604', 'gcc', 'Release') },
         "ACC1604 gcc RelWithDebInfo" :          { ACCTest('ACC-1604', 'gcc', 'RelWithDebInfo') },
         "ACC1804 clang-7 Debug" :               { ACCTest('ACC-1804', 'clang-7', 'Debug') },
         "ACC1804 clang-7 RelWithDebInfo" :      { ACCTest('ACC-1804', 'clang-7', 'RelWithDebinfo') },
         "Win2016 Debug Cross Compile" :         { win2016CrossCompile("Debug") },
         "Win2016 Release Cross Compile" :       { win2016CrossCompile("Release") },
         "Win2016 Debug Linux-Elf-build" :       { win2016LinuxElfBuild("Debug") },
         "Win2016 Release Linux-Elf-build" :     { win2016LinuxElfBuild("Release") },
         "ACC1604 Container RelWithDebInfo" :    { ACCContainerTest('ACC-1604') }
