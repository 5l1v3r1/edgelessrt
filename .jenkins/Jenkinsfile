def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def ACCTest(String label, String compiler, String unit, String suite) {
    def c_compiler
    def cpp_compiler
    stage("$label $compiler $unit $suite") {
        node("$label") {
            cleanWs()
            checkout scm

            timeout(15) {
                dir('build') {
                    if (compiler == "gcc") {
                        c_compiler = "gcc"
                        cpp_compiler = "g++"
                    } else if (compiler == "clang-7") {
                        c_compiler = "clang-7"
                        cpp_compiler = "clang++-7"
                    }
                    withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}"]) {
                        sh """
                        cmake .. -DCMAKE_BUILD_TYPE=${suite}
                        make
                        ctest --output-on-failure
                        """
                    }
                }
            }

        }
    }
}

def simulationTest(String compiler, String unit, String suite ) {
    def c_compiler
    def cpp_compiler
    stage("Sim $compiler $unit $suite") {
        node {
            cleanWs()
            checkout scm

            def oetoolsSim = docker.build("oetools-simulation", "-f .jenkins/Dockerfile .")
            oetoolsSim.inside {
                timeout(15) {
                    dir('build') {
                        if (compiler == "gcc") {
                            c_compiler = "gcc"
                            cpp_compiler = "g++"
                        } else if (compiler == "clang-7") {
                            c_compiler = "clang-7"
                            cpp_compiler = "clang++-7"
                        }
                        withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}","OE_SIMULATION=1"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=${suite} -DUSE_LIBSGX=OFF
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def ACCContainerTest(String label) {
    stage("$label Container RelWithDebInfo") {
        node("$label") {
            cleanWs()
            checkout scm

            def oetoolsContainer = docker.build("oetools-containertest", "-f .jenkins/Dockerfile .")
            oetoolsContainer.inside('--device /dev/sgx:/dev/sgx') {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def checkDevFlows() {
    stage('Check dev flows') {
        node {
            cleanWs()
            checkout scm

            def oetoolsCheck = docker.build("oetools-check", "-f .jenkins/Dockerfile .")
            oetoolsCheck.inside {
                timeout(2) {
                    sh './scripts/check-ci'
                }
            }
        }
    }
    stage('Default compiler') {
        // This stage verifies developer flows after running ansible playbooks to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-base", '-f .jenkins/Dockerfile.scripts .')

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs ansible playbook.

                    dir('build') {
                        sh '''
                        cmake .. -DUSE_LIBSGX=OFF
                        make
                    '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def win2016DebugCrossPlatform() {
    stage('Linux SGX1 Debug') {
        node {
            cleanWs()
            checkout scm
            def oetoolsWincp = docker.build("oetools-wincp", "-f .jenkins/Dockerfile .")
            oetoolsWincp.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7","OE_SIMULATION=1"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=Debug -DUSE_DEBUG_MALLOC=OFF
                            make
                            """
                        }
                    }
                    stash includes: 'build/tests/**', name: 'linuxdebug'
                }
            }
        }
    }
    stage('Windows Debug') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash 'linuxdebug'
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Debug')
       }
    }
}

def win2016ReleaseCrossPlatform() {
    stage('Linux SGX1 Release') {
        node {
            cleanWs()
            checkout scm
            def oetoolsWin = docker.build("oetools-wincp", "-f .jenkins/Dockerfile .")
            oetoolsWin.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7","OE_SIMULATION=1"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=Release
                            make
                            """
                        }
                    }
                    stash includes: 'build/tests/**', name: 'linuxrelease'
                }
            }
        }
    }
    stage('Windows Release') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash 'linuxrelease'
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Release')
        }
    }
}

def win2016Debug() {
    stage('Windows Debug') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Debug -build_enclaves')
       }
    }
}

def win2016Release() {
    stage('Windows Release') {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            PowerShellWrapper('./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $ENV:WORKSPACE/linuxbin/tests -build_type Release -build_enclaves')
        }
    }
}
parallel "Check Developer Experience" :         { checkDevFlows() },
        "Win2016 Debug Cross-platform" :        { win2016DebugCrossPlatform() },
        "Win2016 Release Cross-platform" :      { win2016ReleaseCrossPlatform() },
        "Win2016 Debug" :                       { win2016Debug() },
        "ACC1604 Container RelWithDebInfo" :    { ACCContainerTest('ACC-1604') }
