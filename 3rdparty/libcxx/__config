#ifndef __OPEN_ENCLAVE_LIBCXX_CONFIG
#define __OPEN_ENCLAVE_LIBCXX_CONFIG

#include <features.h>
#include <bits/alltypes.h>

namespace std
{
    int pthread_create(
        pthread_t* thread,
        const pthread_attr_t* attr,
        void* (*start_routine)(void* arg),
        void* arg);

    int pthread_join(pthread_t thread, void** ret);

    int pthread_detach(pthread_t thread);

    int sched_yield(void);

    locale_t uselocale(locale_t newloc);

    locale_t __cloc(void);

    long long int strtoll_l(
        const char *nptr, char **endptr, int base, locale_t loc);

    unsigned long long int strtoull_l(
        const char *nptr, char **endptr, int base, locale_t loc);

    int getc(FILE *stream);

    int ungetc(int c, FILE *stream);

    size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

    int fflush(FILE *stream);

    struct lconv *localeconv(void);

    locale_t newlocale(
        int category_mask, const char *locale, locale_t base);

    void freelocale(locale_t loc);

    char *setlocale(int category, const char *locale);

    size_t strxfrm_l(char *dest, const char *src, size_t n, locale_t loc);

    size_t wcsxfrm_l(
        wchar_t *dest, const wchar_t *src, size_t n, locale_t loc);

    int strcoll_l(const char *s1, const char *s2, locale_t loc);

    int wcscoll_l(const wchar_t *s1, const wchar_t *s2, locale_t loc);

    size_t strftime_l(char *s, size_t max, const char *format, 
        const struct tm *tm, locale_t loc);

    unsigned int arc4random(void);
}

#include <__config_original>

#ifdef _LIBCPP_HAS_CATOPEN
# undef _LIBCPP_HAS_CATOPEN
#endif

#ifndef _LIBCPP_USING_ARC4_RANDOM
# define _LIBCPP_USING_ARC4_RANDOM
#endif

#endif /* __OPEN_ENCLAVE_LIBCXX_CONFIG */
