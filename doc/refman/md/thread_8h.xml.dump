doxygen
{
    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
    xsi:noNamespaceSchemaLocation=compound.xsd
    version=1.8.11
    compounddef
    {
        id=thread_8h
        kind=file
        language=C++
        compoundname
        {
            chars="thread.h"
        }
        includes
        {
            local=yes
            chars="defs.h"
        }
        includes
        {
            local=yes
            chars="types.h"
        }
        includedby
        {
            refid=enclave_8h
            local=yes
            chars="/root/openenclave/include/openenclave/enclave.h"
        }
        includedby
        {
            refid=host_8h
            local=yes
            chars="/root/openenclave/include/openenclave/host.h"
        }
        incdepgraph
        {
            node
            {
                id=30
                label
                {
                    chars="defs.h"
                }
            }
            node
            {
                id=29
                label
                {
                    chars="/root/openenclave/include/openenclave/thread.h"
                }
                link
                {
                    refid=thread.h
                }
                childnode
                {
                    refid=30
                    relation=include
                }
                childnode
                {
                    refid=31
                    relation=include
                }
            }
            node
            {
                id=31
                label
                {
                    chars="types.h"
                }
            }
        }
        invincdepgraph
        {
            node
            {
                id=34
                label
                {
                    chars="/root/openenclave/include/openenclave/host.h"
                }
                link
                {
                    refid=host_8h
                }
            }
            node
            {
                id=32
                label
                {
                    chars="/root/openenclave/include/openenclave/thread.h"
                }
                link
                {
                    refid=thread.h
                }
                childnode
                {
                    refid=33
                    relation=include
                }
                childnode
                {
                    refid=34
                    relation=include
                }
            }
            node
            {
                id=33
                label
                {
                    chars="/root/openenclave/include/openenclave/enclave.h"
                }
                link
                {
                    refid=enclave_8h
                }
            }
        }
        innerclass
        {
            refid=struct__OE__ThreadAttr
            prot=public
            chars="_OE_ThreadAttr"
        }
        innerclass
        {
            refid=struct__OE__Mutex
            prot=public
            chars="_OE_Mutex"
        }
        innerclass
        {
            refid=struct__OE__Cond
            prot=public
            chars="_OE_Cond"
        }
        sectiondef
        {
            kind=define
            memberdef
            {
                kind=define
                id=thread_8h_1a2b44f40cb0a46b88f1ab9df393f2d8bc
                prot=public
                static=no
                name
                {
                    chars="OE_ONCE_INITIALIZER"
                }
                initializer
                {
                    chars="0"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=44
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=44
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=thread_8h_1aa03bbf56daf9077200d5c436380ed2a1
                prot=public
                static=no
                name
                {
                    chars="OE_SPINLOCK_INITIALIZER"
                }
                initializer
                {
                    chars="0"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=69
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=69
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=thread_8h_1aead8e438f728b5946f850b9e64610694
                prot=public
                static=no
                name
                {
                    chars="OE_MUTEX_INITIALIZER"
                }
                initializer
                {
                    chars="{OE_SPINLOCK_INITIALIZER,0,{NULL,NULL},{0}}"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=130
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=130
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=thread_8h_1a7f423ee45fe788da16e4406f4a3c31c4
                prot=public
                static=no
                name
                {
                    chars="OE_COND_INITIALIZER"
                }
                initializer
                {
                    chars="{OE_SPINLOCK_INITIALIZER,{NULL, NULL},{0,0,0}}"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=221
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=221
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=thread_8h_1adbbd0b63569086635b31c011553ffb94
                prot=public
                static=no
                name
                {
                    chars="OE_THREADKEY_INITIALIZER"
                }
                initializer
                {
                    chars="0"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=334
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=334
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=var
            memberdef
            {
                kind=variable
                id=thread_8h_1a542724dc1e4ce561285abf4ddcf2e1be
                prot=public
                static=no
                mutable=no
                type
                {
                    chars="OE_EXTERNC_BEGIN typedef unsigned long"
                }
                definition
                {
                    chars="OE_EXTERNC_BEGIN typedef unsigned long OE_Thread"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_Thread"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=9
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=9
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=typedef
            memberdef
            {
                kind=typedef
                id=thread_8h_1af7fccd1c8de5914413964f40fed76247
                prot=public
                static=no
                type
                {
                    ref
                    {
                        refid=struct__OE__ThreadAttr
                        kindref=compound
                        chars="_OE_ThreadAttr"
                    }
                    chars="struct"
                }
                definition
                {
                    chars="typedef struct _OE_ThreadAttr\n OE_ThreadAttr"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_ThreadAttr"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=15
                    column=1
                }
            }
            memberdef
            {
                kind=typedef
                id=thread_8h_1afc581ee12037cc64c93be4e66f97c79c
                prot=public
                static=no
                type
                {
                    chars="unsigned int"
                }
                definition
                {
                    chars="typedef unsigned int OE_OnceType"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_OnceType"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=42
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=42
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=typedef
                id=thread_8h_1a2f7b159fe26f84c5e1052c7d6e7a18fb
                prot=public
                static=no
                type
                {
                    chars="unsigned int"
                }
                definition
                {
                    chars="typedef volatile unsigned int OE_Spinlock"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_Spinlock"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=71
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=71
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=typedef
                id=thread_8h_1a75499dc3d99258761eddcb1088b23a11
                prot=public
                static=no
                type
                {
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="_OE_Mutex"
                    }
                    chars="struct"
                }
                definition
                {
                    chars="typedef struct _OE_Mutex\n OE_Mutex"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_Mutex"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=145
                    column=1
                }
            }
            memberdef
            {
                kind=typedef
                id=thread_8h_1a1089f20c6281206ad31fa4191561113a
                prot=public
                static=no
                type
                {
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="_OE_Cond"
                    }
                    chars="struct"
                }
                definition
                {
                    chars="typedef struct _OE_Cond\n OE_Cond"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_Cond"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=235
                    column=1
                }
            }
            memberdef
            {
                kind=typedef
                id=thread_8h_1a0e5b9cdf0098d8f266db89706409123e
                prot=public
                static=no
                type
                {
                    chars="unsigned int"
                }
                definition
                {
                    chars="typedef unsigned int OE_ThreadKey"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_ThreadKey"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=336
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/thread.h
                    bodystart=336
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=func
            memberdef
            {
                kind=function
                id=thread_8h_a6bff3d1b325e3770da54e4ec6444ea71_1a6bff3d1b325e3770da54e4ec6444ea71
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Thread"
                }
                definition
                {
                    chars="OE_Thread OE_ThreadSelf"
                }
                argsstring
                {
                    chars="(void)"
                }
                name
                {
                    chars="OE_ThreadSelf"
                }
                param
                {
                    type
                    {
                        chars="void"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Returns the identifier of the current thread."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function returns the identifier of the calling thread. Two thread identifiers can be compared for the equality by OE_ThreadEqual()."
                    }
                    para
                    {
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns the thread identifier of the calling thread."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=26
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_aee75629a8fef24910510c1a46b06b5ea_1aee75629a8fef24910510c1a46b06b5ea
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_ThreadEqual"
                }
                argsstring
                {
                    chars="(OE_Thread thread1, OE_Thread thread2)"
                }
                name
                {
                    chars="OE_ThreadEqual"
                }
                param
                {
                    type
                    {
                        chars="OE_Thread"
                    }
                    declname
                    {
                        chars="thread1"
                    }
                }
                param
                {
                    type
                    {
                        chars="OE_Thread"
                    }
                    declname
                    {
                        chars="thread2"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Checks two thread identifiers for equality."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function checks whether two thread identifiers refer to the same thread. Thread identifiers are obtained by calling OE_ThreadSelf()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="thread1"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="A thread identifer obtained with OE_ThreadSelf()."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="thread2"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="A thread identifer obtained with OE_ThreadSelf()."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="non-zero if the thread identifiers are equal."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=40
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a4a5122ddbe1258fb449d9a1bdb4ad782_1a4a5122ddbe1258fb449d9a1bdb4ad782
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_Once"
                }
                argsstring
                {
                    chars="(OE_OnceType *once, void(*func)(void))"
                }
                name
                {
                    chars="OE_Once"
                }
                param
                {
                    type
                    {
                        chars="OE_OnceType *"
                    }
                    declname
                    {
                        chars="once"
                    }
                }
                param
                {
                    type
                    {
                        chars="void(*)(void)"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                briefdescription
                {
                    para
                    {
                        bold
                        {
                            chars="func"
                        }
                        bold
                        {
                            chars="once"
                        }
                        chars="This function calls  exactly once for a given  parameter."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        verbatim
                        {
                            chars="static OE_OnceType _once = OE_ONCE_INITIALIZER;\n\nstatic void _Initialize(void)\n{\n    // Perform one time initialization here!\n}\n\n...\n\nOE_Once(&_once, _Initialize);"
                        }
                        chars="OE_Once() may be called safely from different threads. OE_Once() is typically used to perform one-time initialization, as in the example below."
                    }
                    para
                    {
                        chars="The **_Initialize** function is called by the first thread to call OE_Once()."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=65
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_ad8ffd8e58799d4695937298e4f32e3c0_1ad8ffd8e58799d4695937298e4f32e3c0
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_SpinInit"
                }
                argsstring
                {
                    chars="(OE_Spinlock *spinlock)"
                }
                name
                {
                    chars="OE_SpinInit"
                }
                param
                {
                    type
                    {
                        chars="OE_Spinlock *"
                    }
                    declname
                    {
                        chars="spinlock"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Initializes a spin lock."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        verbatim
                        {
                            chars="static OE_Spinlock _spinlock = OE_SPINLOCK_INITIALIZER;"
                        }
                        chars="This function initializes a spin lock. Spin locks can also be initialized statically as follows."
                    }
                    para
                    {
                        chars="Once initialized, threads may use a spin lock to synchronize access to data. See OE_SpinLock() and OE_SpinUnlock()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="spinlock"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Initialize the given spin lock."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Return zero if successful"
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=89
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a9cfe43dea064f147ea8b552fbe9a5e4d_1a9cfe43dea064f147ea8b552fbe9a5e4d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_SpinLock"
                }
                argsstring
                {
                    chars="(OE_Spinlock *spinlock)"
                }
                name
                {
                    chars="OE_SpinLock"
                }
                param
                {
                    type
                    {
                        chars="OE_Spinlock *"
                    }
                    declname
                    {
                        chars="spinlock"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Acquire a lock on a spin lock."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="A thread calls this function to acquire a lock on a spin lock. If another thread has already acquired a lock, the calling thread spins until the lock is available. If more than one thread is waiting on the spin lock, the selection of the next thread to obtain the lock is arbitrary."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="spinlock"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Lock this spin lock."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Return zero if successful"
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=104
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_aee29ed4b2c09d3db4fe68b64f28eee11_1aee29ed4b2c09d3db4fe68b64f28eee11
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_SpinUnlock"
                }
                argsstring
                {
                    chars="(OE_Spinlock *spinlock)"
                }
                name
                {
                    chars="OE_SpinUnlock"
                }
                param
                {
                    type
                    {
                        chars="OE_Spinlock *"
                    }
                    declname
                    {
                        chars="spinlock"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Release the lock on a spin lock."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="A thread calls this function to release a lock on a spin lock."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="spinlock"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Unlock this spin lock."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Return zero if successful"
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=116
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a149708466f27e0e0598db4da53f399e5_1a149708466f27e0e0598db4da53f399e5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_SpinDestroy"
                }
                argsstring
                {
                    chars="(OE_Spinlock *spinlock)"
                }
                name
                {
                    chars="OE_SpinDestroy"
                }
                param
                {
                    type
                    {
                        chars="OE_Spinlock *"
                    }
                    declname
                    {
                        chars="spinlock"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Destroy a spin lock."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function destroys a spin lock."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="spinlock"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Destroy this spin lock."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Return zero if successful"
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=128
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_1a83dbeab2cd5780e1093b9767edda0d11
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                }
                definition
                {
                    chars="OE_STATIC_ASSERT"
                }
                argsstring
                {
                    chars="((sizeof(OE_Mutex)==40))"
                }
                name
                {
                    chars="OE_STATIC_ASSERT"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                        chars="(sizeof()==40)"
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=148
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_ad8292b32628aac53cdbd108af6d28ac5_1ad8292b32628aac53cdbd108af6d28ac5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_MutexInit"
                }
                argsstring
                {
                    chars="(OE_Mutex *mutex)"
                }
                name
                {
                    chars="OE_MutexInit"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                    }
                    declname
                    {
                        chars="mutex"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Initialize a mutex."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function initializes a mutex. All mutexes are recursive. Once initialized, multiple threads can use this mutex to synchronoze access to data. See OE_MutexLock() and OE_MutexUnlock()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="mutex"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Initialize this mutex."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Return zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=162
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a7d64c3e4796b8e037565f3828eebd678_1a7d64c3e4796b8e037565f3828eebd678
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_MutexLock"
                }
                argsstring
                {
                    chars="(OE_Mutex *mutex)"
                }
                name
                {
                    chars="OE_MutexLock"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                    }
                    declname
                    {
                        chars="mutex"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Acquires a lock on a mutex."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function acquires a lock on a mutex."
                    }
                    para
                    {
                        chars="For enclaves, OE_MutexLock() performs an OCALL to wait for the mutex to be signaled."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="mutex"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Acquire a lock on this mutex."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=177
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_ac1af93501419169a3119ce6e6680ec35_1ac1af93501419169a3119ce6e6680ec35
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_MutexTryLock"
                }
                argsstring
                {
                    chars="(OE_Mutex *mutex)"
                }
                name
                {
                    chars="OE_MutexTryLock"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                    }
                    declname
                    {
                        chars="mutex"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Tries to acquire a lock on a mutex."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function attempts to acquire a lock on the given mutex if it is available. If the mutex is unavailable, the function returns immediately. Unlike OE_MutexLock(), this function never performs an OCALL."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="mutex"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Acquire a lock on this mutex."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero if the lock was obtained and non-zero if not."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=191
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_ace88edf6a4a8163d4cb6324dfc20aa7e_1ace88edf6a4a8163d4cb6324dfc20aa7e
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_MutexUnlock"
                }
                argsstring
                {
                    chars="(OE_Mutex *mutex)"
                }
                name
                {
                    chars="OE_MutexUnlock"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                    }
                    declname
                    {
                        chars="mutex"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Releases a mutex."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function releases the lock on a mutex obtained with either OE_MutexLock() or OE_MutexTryLock()."
                    }
                    para
                    {
                        chars="In enclaves, this function performs an OCALL, where it wakes the next thread waiting on a mutex."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="mutex"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Release the lock on this mutex."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=207
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a2dc533478a292104292f0cf7097e3566_1a2dc533478a292104292f0cf7097e3566
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_MutexDestroy"
                }
                argsstring
                {
                    chars="(OE_Mutex *mutex)"
                }
                name
                {
                    chars="OE_MutexDestroy"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                    }
                    declname
                    {
                        chars="mutex"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Destroys a mutex."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function destroys a mutex that was initialized with OE_MutexInit()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="Destroy"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="this mutex."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=219
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_1a42af170b201622a2c6d18235dd2014d5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                }
                definition
                {
                    chars="OE_STATIC_ASSERT"
                }
                argsstring
                {
                    chars="((sizeof(OE_Cond)==48))"
                }
                name
                {
                    chars="OE_STATIC_ASSERT"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Cond
                            kindref=compound
                            chars="OE_Cond"
                        }
                        chars="(sizeof()==48)"
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=238
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a7ba30935e8809899d5c12f9f9a64f03e_1a7ba30935e8809899d5c12f9f9a64f03e
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_CondInit"
                }
                argsstring
                {
                    chars="(OE_Cond *cond)"
                }
                name
                {
                    chars="OE_CondInit"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Cond
                            kindref=compound
                            chars="OE_Cond"
                        }
                    }
                    declname
                    {
                        chars="cond"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Initializes a condition variable."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        verbatim
                        {
                            chars="OE_Cond cond = OE_COND_INITIALIZER;"
                        }
                        chars="This function initializes a condition variable. Condition variables can also be initialized statically as follows."
                    }
                    para
                    {
                        chars="Condition variables allow threads to wait on an event using a first-come first-served (FCFS) policy."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="cond"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Initialize this condition variable."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=256
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a681a086a647cf9d4af673b130e011136_1a681a086a647cf9d4af673b130e011136
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_CondWait"
                }
                argsstring
                {
                    chars="(OE_Cond *cond, OE_Mutex *mutex)"
                }
                name
                {
                    chars="OE_CondWait"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Cond
                            kindref=compound
                            chars="OE_Cond"
                        }
                    }
                    declname
                    {
                        chars="cond"
                    }
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Mutex
                            kindref=compound
                            chars="OE_Mutex"
                        }
                    }
                    declname
                    {
                        chars="mutex"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Waits on a condition variable."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="mutex"
                        }
                        chars="A thread calls this function to wait on a condition variable. If the condition variable is available, OE_CondWait() returns immediately. Otherwise, the thread is placed on a first-come first-served (FCFS) queue where it waits to be signaled. The  parameter is used to synchronize access to the condition variable. The caller locks this mutex before calling OE_CondWait(), which places the thread on the waiting queue and unlocks the mutex. When the thread is signaled by OE_CondSignal(), the waiting thread acquires the mutex and returns."
                    }
                    para
                    {
                        chars="In enclaves, this function performs an OCALL, where the thread waits to be signaled."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="cond"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Wait on this condition variable."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="mutex"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="This mutex must be locked by the caller."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=279
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_aec38ce9ea989cd7b7bf8911968e6744f_1aec38ce9ea989cd7b7bf8911968e6744f
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_CondSignal"
                }
                argsstring
                {
                    chars="(OE_Cond *cond)"
                }
                name
                {
                    chars="OE_CondSignal"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Cond
                            kindref=compound
                            chars="OE_Cond"
                        }
                    }
                    declname
                    {
                        chars="cond"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Signal a thread waiting on a condition variable."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="A thread calls this function to signal the next thread waiting on the given condition variable. Waiting threads call OE_CondWait() which places them on on a first-come first-served (FCFS) queue, where they wait to be signaled. OE_CondSignal() wakes up the thread at the front of queue, causing it to return from OE_CondWait()."
                    }
                    para
                    {
                        chars="In enclaves, this function performs an OCALL, where it wakes the next waiting thread."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="cond"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Signal this condition variable."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=300
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a089e8fbdce8abbbc6591222dec91ddb3_1a089e8fbdce8abbbc6591222dec91ddb3
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_CondBroadcast"
                }
                argsstring
                {
                    chars="(OE_Cond *cond)"
                }
                name
                {
                    chars="OE_CondBroadcast"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Cond
                            kindref=compound
                            chars="OE_Cond"
                        }
                    }
                    declname
                    {
                        chars="cond"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Signals all threads waiting on a condition variable."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="A thread calls this function to signal all threads waiting on the given condition variable. Waiting threads call OE_CondWait(), which places them on a first-come first-served (FCFS) queue, where they wait to be signaled. OE_CondBroadcast() wakes up all threads on the queue, causing them to return from OE_CondWait(). In enclaves, this function performns an OCALL, where it wakes all waiting threads."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="cond"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The condition variable to be signaled."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=318
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a1799c5e689755c0dd0506b99d6840b71_1a1799c5e689755c0dd0506b99d6840b71
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_CondDestroy"
                }
                argsstring
                {
                    chars="(OE_Cond *cond)"
                }
                name
                {
                    chars="OE_CondDestroy"
                }
                param
                {
                    type
                    {
                        ref
                        {
                            refid=struct__OE__Cond
                            kindref=compound
                            chars="OE_Cond"
                        }
                    }
                    declname
                    {
                        chars="cond"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Destroys a condition variable."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function destroys the given condition variable."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="cond"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Destroy this condition variable."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=331
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a37e5d1d2699359f2e5f584a031eb719a_1a37e5d1d2699359f2e5f584a031eb719a
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_ThreadKeyCreate"
                }
                argsstring
                {
                    chars="(OE_ThreadKey *key, void(*destructor)(void *value))"
                }
                name
                {
                    chars="OE_ThreadKeyCreate"
                }
                param
                {
                    type
                    {
                        chars="OE_ThreadKey *"
                    }
                    declname
                    {
                        chars="key"
                    }
                }
                param
                {
                    type
                    {
                        chars="void(*)(void *value)"
                    }
                    declname
                    {
                        chars="destructor"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Create a key for accessing thread-specific data."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="destructor"
                        }
                        chars="This function allocates a thread-specific data (TSD) entry and initializes a key for accessing it. The function given by the  parameter is called when the key is deleted by OE_ThreadKeyDelete()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="key"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Set this key to refer to the newly allocated TSD entry."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="destructor"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="If non-null, call this function from OE_ThreadKeyDelete()."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=351
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_a5c14c0988b9c117ae40a40a1aee0b704_1a5c14c0988b9c117ae40a40a1aee0b704
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_ThreadKeyDelete"
                }
                argsstring
                {
                    chars="(OE_ThreadKey key)"
                }
                name
                {
                    chars="OE_ThreadKeyDelete"
                }
                param
                {
                    type
                    {
                        chars="OE_ThreadKey"
                    }
                    declname
                    {
                        chars="key"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Delete a key for accessing thread-specific data."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="destructor"
                        }
                        chars="This function deletes the thread-specific data (TSD) entry associated with the given key, calling the function given by the  parameter initially passed to OE_ThreadKeyCreate()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="key"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Delete the TSD entry associated with this key."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=367
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_afe7f5e48461b5262a96ee4b56c07f373_1afe7f5e48461b5262a96ee4b56c07f373
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_ThreadSetSpecific"
                }
                argsstring
                {
                    chars="(OE_ThreadKey key, const void *value)"
                }
                name
                {
                    chars="OE_ThreadSetSpecific"
                }
                param
                {
                    type
                    {
                        chars="OE_ThreadKey"
                    }
                    declname
                    {
                        chars="key"
                    }
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="value"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Sets the value of a thread-specific data entry."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This funciton sets the value of a thread-specific data (TSD) entry associated with the given key."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="key"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Set the TSD entry associated with this key."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="value"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Set the TSD entry to this value."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns zero on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=382
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=thread_8h_af39a5975141e08c467f807f3800410c1_1af39a5975141e08c467f807f3800410c1
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_ThreadGetSpecific"
                }
                argsstring
                {
                    chars="(OE_ThreadKey key)"
                }
                name
                {
                    chars="OE_ThreadGetSpecific"
                }
                param
                {
                    type
                    {
                        chars="OE_ThreadKey"
                    }
                    declname
                    {
                        chars="key"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Gets the value of a thread-specific data entry."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function retrieves the value of a thread-specific data (TSD) entry associated with the given key."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="key"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Get the TSD entry value associated with this key."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns the TSD value."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/thread.h
                    line=397
                    column=1
                }
            }
        }
        briefdescription
        {
        }
        detaileddescription
        {
        }
        programlisting
        {
            codeline
            {
                lineno=1
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndef_OE_THREAD_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=2
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#define_OE_THREAD_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=3
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=4
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"defs.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=5
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"types.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=6
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=7
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_BEGIN"
                }
            }
            codeline
            {
                lineno=8
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=9
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="long"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_Thread;"
                }
            }
            codeline
            {
                lineno=10
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=11
                refid=struct__OE__ThreadAttr
                refkind=compound
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__ThreadAttr
                        kindref=compound
                        chars="_OE_ThreadAttr"
                    }
                    sp
                    {
                    }
                }
            }
            codeline
            {
                lineno=12
                highlight
                {
                    class=normal
                    chars="{"
                }
            }
            codeline
            {
                lineno=13
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="long"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="__impl[7];"
                }
            }
            codeline
            {
                lineno=14
                highlight
                {
                    class=normal
                    chars="}"
                }
            }
            codeline
            {
                lineno=15
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__ThreadAttr
                        kindref=compound
                        chars="OE_ThreadAttr"
                    }
                    chars=";"
                }
            }
            codeline
            {
                lineno=16
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=26
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ThreadOE_ThreadSelf("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    chars=");"
                }
            }
            codeline
            {
                lineno=27
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=40
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ThreadEqual(OE_Threadthread1,OE_Threadthread2);"
                }
            }
            codeline
            {
                lineno=41
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=42
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_OnceType;"
                }
            }
            codeline
            {
                lineno=43
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=44
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_ONCE_INITIALIZER0"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=45
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=65
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_Once("
                }
            }
            codeline
            {
                lineno=66
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_OnceType*once,"
                }
            }
            codeline
            {
                lineno=67
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="(*func)("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    chars="));"
                }
            }
            codeline
            {
                lineno=68
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=69
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_SPINLOCK_INITIALIZER0"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=70
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=71
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="volatile"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_Spinlock;"
                }
            }
            codeline
            {
                lineno=72
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=89
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_SpinInit(OE_Spinlock*spinlock);"
                }
            }
            codeline
            {
                lineno=90
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=104
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_SpinLock(OE_Spinlock*spinlock);"
                }
            }
            codeline
            {
                lineno=105
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=116
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_SpinUnlock(OE_Spinlock*spinlock);"
                }
            }
            codeline
            {
                lineno=117
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=128
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_SpinDestroy(OE_Spinlock*spinlock);"
                }
            }
            codeline
            {
                lineno=129
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=130
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_MUTEX_INITIALIZER{OE_SPINLOCK_INITIALIZER,0,{NULL,NULL},{0}}"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=131
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=132
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*Definitionofamutex*/"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=133
                refid=struct__OE__Mutex
                refkind=compound
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="_OE_Mutex"
                    }
                }
            }
            codeline
            {
                lineno=134
                highlight
                {
                    class=normal
                    chars="{"
                }
            }
            codeline
            {
                lineno=135
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Spinlocklock;"
                }
            }
            codeline
            {
                lineno=136
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="refs;"
                }
            }
            codeline
            {
                lineno=137
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="__padding[16];"
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*alignwithsystempthread_t*/"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=138
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=139
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="{"
                }
            }
            codeline
            {
                lineno=140
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*front;"
                }
            }
            codeline
            {
                lineno=141
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*back;"
                }
            }
            codeline
            {
                lineno=142
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="}"
                }
            }
            codeline
            {
                lineno=143
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="queue;"
                }
            }
            codeline
            {
                lineno=144
                highlight
                {
                    class=normal
                    chars="}"
                }
            }
            codeline
            {
                lineno=145
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    chars=";"
                }
            }
            codeline
            {
                lineno=146
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=147
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*Thismustbethesamesizeaspthread_mutex_tinGLIBC*/"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=148
                highlight
                {
                    class=normal
                    chars="OE_STATIC_ASSERT(("
                }
                highlight
                {
                    class=keyword
                    chars="sizeof"
                }
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="()==40));"
                }
            }
            codeline
            {
                lineno=149
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=162
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    chars="OE_MutexInit(*mutex);"
                }
            }
            codeline
            {
                lineno=163
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=177
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    chars="OE_MutexLock(*mutex);"
                }
            }
            codeline
            {
                lineno=178
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=191
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    chars="OE_MutexTryLock(*mutex);"
                }
            }
            codeline
            {
                lineno=192
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=207
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    chars="OE_MutexUnlock(*mutex);"
                }
            }
            codeline
            {
                lineno=208
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=219
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    chars="OE_MutexDestroy(*mutex);"
                }
            }
            codeline
            {
                lineno=220
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=221
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_COND_INITIALIZER{OE_SPINLOCK_INITIALIZER,{NULL,NULL},{0,0,0}}"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=222
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=223
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*Conditionvariablerepresentation*/"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=224
                refid=struct__OE__Cond
                refkind=compound
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="_OE_Cond"
                    }
                }
            }
            codeline
            {
                lineno=225
                highlight
                {
                    class=normal
                    chars="{"
                }
            }
            codeline
            {
                lineno=226
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Spinlocklock;"
                }
            }
            codeline
            {
                lineno=227
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=228
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="{"
                }
            }
            codeline
            {
                lineno=229
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*front;"
                }
            }
            codeline
            {
                lineno=230
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*back;"
                }
            }
            codeline
            {
                lineno=231
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="}"
                }
            }
            codeline
            {
                lineno=232
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="queue;"
                }
            }
            codeline
            {
                lineno=233
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="long"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="padding[3];"
                }
            }
            codeline
            {
                lineno=234
                highlight
                {
                    class=normal
                    chars="}"
                }
            }
            codeline
            {
                lineno=235
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    chars=";"
                }
            }
            codeline
            {
                lineno=236
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=237
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*Thismustthesamesizeaspthread_cond_tinGLIBC*/"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=238
                highlight
                {
                    class=normal
                    chars="OE_STATIC_ASSERT(("
                }
                highlight
                {
                    class=keyword
                    chars="sizeof"
                }
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="()==48));"
                }
            }
            codeline
            {
                lineno=239
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=256
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    sp
                    {
                    }
                    chars="OE_CondInit(*cond);"
                }
            }
            codeline
            {
                lineno=257
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=279
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_CondWait("
                }
            }
            codeline
            {
                lineno=280
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*cond,"
                }
            }
            codeline
            {
                lineno=281
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Mutex
                        kindref=compound
                        chars="OE_Mutex"
                    }
                    sp
                    {
                    }
                    chars="*mutex);"
                }
            }
            codeline
            {
                lineno=282
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=300
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_CondSignal("
                }
            }
            codeline
            {
                lineno=301
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    sp
                    {
                    }
                    chars="*cond);"
                }
            }
            codeline
            {
                lineno=302
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=318
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_CondBroadcast("
                }
            }
            codeline
            {
                lineno=319
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    sp
                    {
                    }
                    chars="*cond);"
                }
            }
            codeline
            {
                lineno=320
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=331
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_CondDestroy("
                }
            }
            codeline
            {
                lineno=332
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=struct__OE__Cond
                        kindref=compound
                        chars="OE_Cond"
                    }
                    sp
                    {
                    }
                    chars="*cond);"
                }
            }
            codeline
            {
                lineno=333
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=334
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_THREADKEY_INITIALIZER0"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=335
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=336
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ThreadKey;"
                }
            }
            codeline
            {
                lineno=337
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=351
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ThreadKeyCreate("
                }
            }
            codeline
            {
                lineno=352
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ThreadKey*key,"
                }
            }
            codeline
            {
                lineno=353
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="(*destructor)("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*value));"
                }
            }
            codeline
            {
                lineno=354
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=367
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ThreadKeyDelete("
                }
            }
            codeline
            {
                lineno=368
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ThreadKeykey);"
                }
            }
            codeline
            {
                lineno=369
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=382
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ThreadSetSpecific("
                }
            }
            codeline
            {
                lineno=383
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ThreadKeykey,"
                }
            }
            codeline
            {
                lineno=384
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*value);"
                }
            }
            codeline
            {
                lineno=385
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=397
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*OE_ThreadGetSpecific("
                }
            }
            codeline
            {
                lineno=398
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ThreadKeykey);"
                }
            }
            codeline
            {
                lineno=399
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=400
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_END"
                }
            }
            codeline
            {
                lineno=401
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=402
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#endif"
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*_OE_THREAD_H*/"
                }
                highlight
                {
                    class=preprocessor
                }
            }
        }
        location
        {
            file=/root/openenclave/include/openenclave/thread.h
        }
    }
}
