doxygen
{
    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
    xsi:noNamespaceSchemaLocation=compound.xsd
    version=1.8.11
    compounddef
    {
        id=host_8h
        kind=file
        language=C++
        compoundname
        {
            chars="host.h"
        }
        includes
        {
            local=no
            chars="stddef.h"
        }
        includes
        {
            local=no
            chars="string.h"
        }
        includes
        {
            local=no
            chars="stdlib.h"
        }
        includes
        {
            local=no
            chars="stdio.h"
        }
        includes
        {
            local=no
            chars="stdint.h"
        }
        includes
        {
            local=no
            chars="stdarg.h"
        }
        includes
        {
            local=yes
            chars="defs.h"
        }
        includes
        {
            local=yes
            chars="types.h"
        }
        includes
        {
            local=yes
            chars="result.h"
        }
        includes
        {
            local=yes
            chars="thread.h"
        }
        includes
        {
            local=yes
            chars="sha.h"
        }
        includes
        {
            local=yes
            chars="typeinfo.h"
        }
        includes
        {
            local=yes
            chars="atomic.h"
        }
        incdepgraph
        {
            node
            {
                id=19
                label
                {
                    chars="stdarg.h"
                }
            }
            node
            {
                id=24
                label
                {
                    chars="sha.h"
                }
            }
            node
            {
                id=18
                label
                {
                    chars="stdint.h"
                }
            }
            node
            {
                id=16
                label
                {
                    chars="stdlib.h"
                }
            }
            node
            {
                id=25
                label
                {
                    chars="typeinfo.h"
                }
            }
            node
            {
                id=22
                label
                {
                    chars="result.h"
                }
            }
            node
            {
                id=14
                label
                {
                    chars="stddef.h"
                }
            }
            node
            {
                id=13
                label
                {
                    chars="/root/openenclave/include/openenclave/host.h"
                }
                link
                {
                    refid=host.h
                }
                childnode
                {
                    refid=14
                    relation=include
                }
                childnode
                {
                    refid=15
                    relation=include
                }
                childnode
                {
                    refid=16
                    relation=include
                }
                childnode
                {
                    refid=17
                    relation=include
                }
                childnode
                {
                    refid=18
                    relation=include
                }
                childnode
                {
                    refid=19
                    relation=include
                }
                childnode
                {
                    refid=20
                    relation=include
                }
                childnode
                {
                    refid=21
                    relation=include
                }
                childnode
                {
                    refid=22
                    relation=include
                }
                childnode
                {
                    refid=23
                    relation=include
                }
                childnode
                {
                    refid=24
                    relation=include
                }
                childnode
                {
                    refid=25
                    relation=include
                }
                childnode
                {
                    refid=26
                    relation=include
                }
            }
            node
            {
                id=20
                label
                {
                    chars="defs.h"
                }
            }
            node
            {
                id=15
                label
                {
                    chars="string.h"
                }
            }
            node
            {
                id=26
                label
                {
                    chars="atomic.h"
                }
            }
            node
            {
                id=21
                label
                {
                    chars="types.h"
                }
            }
            node
            {
                id=23
                label
                {
                    chars="thread.h"
                }
            }
            node
            {
                id=17
                label
                {
                    chars="stdio.h"
                }
            }
        }
        sectiondef
        {
            kind=define
            memberdef
            {
                kind=define
                id=host_8h_1ab26900cb97aa38275824e6b669116bec
                prot=public
                static=no
                name
                {
                    chars="OE_BUILD_HOST"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=20
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=20
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=host_8h_1a5b8a2a631f1edb2cb704d14c01f480f7
                prot=public
                static=no
                name
                {
                    chars="OE_OCALL"
                }
                initializer
                {
                    chars="OE_EXPORT"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=25
                    column=11
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=25
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=host_8h_1ae11fc3e4caf14309146f5b57525e6fb8
                prot=public
                static=no
                name
                {
                    chars="OE_FLAG_DEBUG"
                }
                initializer
                {
                    chars="1"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=30
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=30
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=host_8h_1a1d106bb88691ea81854039064314c281
                prot=public
                static=no
                name
                {
                    chars="OE_FLAG_SIMULATE"
                }
                initializer
                {
                    chars="2"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=31
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=31
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=host_8h_1a5b59e2d498ac044c8c18520347ff9214
                prot=public
                static=no
                name
                {
                    chars="OE_PutErr"
                }
                param
                {
                    defname
                    {
                        chars="..."
                    }
                }
                initializer
                {
                    chars="__OE_PutErr(__FILE__, __LINE__, __VA_ARGS__)"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=140
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=140
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=typedef
            memberdef
            {
                kind=typedef
                id=host_8h_1a80a03dd519e9bc099de34c6ae2fdd033
                prot=public
                static=no
                type
                {
                    chars="struct _OE_Enclave"
                }
                definition
                {
                    chars="typedef struct _OE_Enclave OE_Enclave"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_Enclave"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=18
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=28
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=func
            memberdef
            {
                kind=function
                id=host_8h_a598cc1d7a051a13f5ff4ba6160ccbd82_1a598cc1d7a051a13f5ff4ba6160ccbd82
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_CreateEnclave"
                }
                argsstring
                {
                    chars="(const char *path, uint32_t flags, OE_Enclave **enclave)"
                }
                name
                {
                    chars="OE_CreateEnclave"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="path"
                    }
                }
                param
                {
                    type
                    {
                        chars="uint32_t"
                    }
                    declname
                    {
                        chars="flags"
                    }
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave **"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Creates an enclave from an enclave image file."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        itemizedlist
                        {
                            listitem
                            {
                                para
                                {
                                    chars="Loads an enclave image file"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Maps the enclave memory image onto the driver device (/dev/isgx)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Lays out the enclave memory image and injects metadata"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the driver to create the enclave (ECREATE)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the driver to add the pages to the EPC (EADD/EEXTEND)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the Intel(R) launch enclave (LE) for a launch token (EINITKEY)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the driver to initialize the enclave with the token (EINIT)"
                                }
                            }
                        }
                        chars="This function creates an enclave from an enclave image file. While creating the enclave, this function interacts with the Intel(R) SGX drviver and the Intel(R) AESM service. Enclave creation peforms the following steps."
                    }
                    para
                    {
                        chars="Once these steps have been performed, the enclave is ready to use."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="path"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="oeenclave"
                                        }
                                        bold
                                        {
                                            chars="oesign"
                                        }
                                        chars="The path of an enclave image file in ELF-64 format. This file must have been linked with the  library and signed by the  tool."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="flags"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        itemizedlist
                                        {
                                            listitem
                                            {
                                                para
                                                {
                                                    chars="OE_FLAG_DEBUG - runs the enclave in debug mode"
                                                }
                                            }
                                            listitem
                                            {
                                                para
                                                {
                                                    chars="OE_FLAG_SIMULATION - runs the enclave in simulation mode"
                                                }
                                            }
                                        }
                                        chars="These flags control how the enclave is run."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="enclave"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="This points to the enclave instance upon succeess."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns OE_OK on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=62
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_a20654d7b450c042ac7b256893b287cbe_1a20654d7b450c042ac7b256893b287cbe
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_TerminateEnclave"
                }
                argsstring
                {
                    chars="(OE_Enclave *enclave)"
                }
                name
                {
                    chars="OE_TerminateEnclave"
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave *"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Terminates an enclave and reclaims its resources."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="OE_CreateEnclave()"
                        }
                        chars="This function terminates an enclave and reclaims its resources. This involves unmapping the memory that was mapped by . Once this is peformed, the enclave can no longer be accessed."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="enclave"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The instance of the enclave to be terminated."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns OE_OK on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=79
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_a5a1d79498b0488d2aea62b0596bcdd4d_1a5a1d79498b0488d2aea62b0596bcdd4d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_CallEnclave"
                }
                argsstring
                {
                    chars="(OE_Enclave *enclave, const char *func, void *args)"
                }
                name
                {
                    chars="OE_CallEnclave"
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave *"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="args"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Perform an enclave function call (or ECALL) into the enclave."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="func"
                        }
                        bold
                        {
                            chars="args"
                        }
                        verbatim
                        {
                            chars="OE_ECALL void (*)(void* args);"
                        }
                        chars="Call the enclave function named , passing it the  parameter. The enclave must provide a function with the following signature."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="The meaning of the  parameter is defined by the ECALL implementation and might be null for some implementations."
                    }
                    para
                    {
                        bold
                        {
                            chars="ECALL"
                        }
                        bold
                        {
                            chars="ERET"
                        }
                        chars="At the software layer, this function sends an  message to the enclave and waits for an  message. Note that the ECALL implementation may call back into the host (an OCALL) before returning."
                    }
                    para
                    {
                        bold
                        {
                            chars="ENCLU.EENTER"
                        }
                        bold
                        {
                            chars="ENCLU.EEXIT"
                        }
                        chars="At the hardware layer, this function executes the  instruction to enter the enclave. When the enclave returns from the ECALL, it executes the  instruction exit the enclave and to resume host execution."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="Note that the return value only indicates whether the ECALL was called and not whether it was successful. The ECALL implementation must define its own error reporting scheme based on the  parameter."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="func"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The name of the enclave function that will be called."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="args"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The arguments to be passed to the enclave function."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OK"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function was successful."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_FAILED"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function failed."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=113
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_1a0d2e9102af51fc63e9895612310392f5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_GetQuote"
                }
                argsstring
                {
                    chars="(const void *report, size_t reportSize, void *quote, size_t *quoteSize)"
                }
                name
                {
                    chars="OE_GetQuote"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="report"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="reportSize"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="quote"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t *"
                    }
                    declname
                    {
                        chars="quoteSize"
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=118
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_1af38b45760b690dc036ccdc124962a3db
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result __OE_ECall"
                }
                argsstring
                {
                    chars="(OE_Enclave *enclave, int func, uint64_t argIn, uint64_t *argOut)"
                }
                name
                {
                    chars="__OE_ECall"
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave *"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                param
                {
                    type
                    {
                        chars="int"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="uint64_t"
                    }
                    declname
                    {
                        chars="argIn"
                    }
                }
                param
                {
                    type
                    {
                        chars="uint64_t *"
                    }
                    declname
                    {
                        chars="argOut"
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=124
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_1a0a5aa659e72026dc2a546ebe523697db
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void __OE_PutErr"
                }
                argsstring
                {
                    chars="(const char *file, unsigned int line, const char *format,...)"
                }
                name
                {
                    chars="__OE_PutErr"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="file"
                    }
                }
                param
                {
                    type
                    {
                        chars="unsigned int"
                    }
                    declname
                    {
                        chars="line"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="format"
                    }
                }
                param
                {
                    type
                    {
                        chars="..."
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=131
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_1a1ad5daa2e59eaa21e3f26c36ec9b9c5b
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void OE_SetProgramName"
                }
                argsstring
                {
                    chars="(const char *name)"
                }
                name
                {
                    chars="OE_SetProgramName"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="name"
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=137
                    column=1
                }
            }
        }
        briefdescription
        {
        }
        detaileddescription
        {
        }
        programlisting
        {
            codeline
            {
                lineno=1
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndef_OE_HOST_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=2
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#define_OE_HOST_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=3
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=4
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stddef.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=5
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<string.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=6
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdlib.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=7
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdio.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=8
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdint.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=9
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdarg.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=10
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"defs.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=11
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"types.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=12
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"result.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=13
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"thread.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=14
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"sha.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=15
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"typeinfo.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=16
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"atomic.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=17
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=18
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_BEGIN"
                }
            }
            codeline
            {
                lineno=19
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=20
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#defineOE_BUILD_HOST"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=21
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=22
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifdef__cplusplus"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=23
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_OCALLOE_EXTERNCOE_EXPORT"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=24
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#else"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=25
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_OCALLOE_EXPORT"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=26
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#endif"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=27
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=28
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="_OE_EnclaveOE_Enclave;"
                }
            }
            codeline
            {
                lineno=29
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=30
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_FLAG_DEBUG1"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=31
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_FLAG_SIMULATE2"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=32
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=62
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ResultOE_CreateEnclave("
                }
            }
            codeline
            {
                lineno=63
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*path,"
                }
            }
            codeline
            {
                lineno=64
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint32_tflags,"
                }
            }
            codeline
            {
                lineno=65
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave**enclave);"
                }
            }
            codeline
            {
                lineno=66
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=79
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ResultOE_TerminateEnclave("
                }
            }
            codeline
            {
                lineno=80
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave*enclave);"
                }
            }
            codeline
            {
                lineno=81
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=113
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ResultOE_CallEnclave("
                }
            }
            codeline
            {
                lineno=114
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave*enclave,"
                }
            }
            codeline
            {
                lineno=115
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*func,"
                }
            }
            codeline
            {
                lineno=116
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*args);"
                }
            }
            codeline
            {
                lineno=117
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=118
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_ResultOE_GetQuote("
                }
            }
            codeline
            {
                lineno=119
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*report,"
                }
            }
            codeline
            {
                lineno=120
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="reportSize,"
                }
            }
            codeline
            {
                lineno=121
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*quote,"
                }
            }
            codeline
            {
                lineno=122
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*quoteSize);"
                }
            }
            codeline
            {
                lineno=123
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=124
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_Result__OE_ECall("
                }
            }
            codeline
            {
                lineno=125
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave*enclave,"
                }
            }
            codeline
            {
                lineno=126
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="func,"
                }
            }
            codeline
            {
                lineno=127
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_targIn,"
                }
            }
            codeline
            {
                lineno=128
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_t*argOut);"
                }
            }
            codeline
            {
                lineno=129
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=130
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_PRINTF_FORMAT(3,4)"
                }
            }
            codeline
            {
                lineno=131
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="void__OE_PutErr("
                }
            }
            codeline
            {
                lineno=132
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*file,"
                }
            }
            codeline
            {
                lineno=133
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="unsigned"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="line,"
                }
            }
            codeline
            {
                lineno=134
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*format,"
                }
            }
            codeline
            {
                lineno=135
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="...);"
                }
            }
            codeline
            {
                lineno=136
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=137
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_SetProgramName("
                }
            }
            codeline
            {
                lineno=138
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*name);"
                }
            }
            codeline
            {
                lineno=139
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=140
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_PutErr(...)__OE_PutErr(__FILE__,__LINE__,__VA_ARGS__)"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=141
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=142
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_END"
                }
            }
            codeline
            {
                lineno=143
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=144
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#endif"
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*_OE_HOST_H*/"
                }
                highlight
                {
                    class=preprocessor
                }
            }
        }
        location
        {
            file=/root/openenclave/include/openenclave/host.h
        }
    }
}
