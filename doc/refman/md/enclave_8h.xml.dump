doxygen
{
    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
    xsi:noNamespaceSchemaLocation=compound.xsd
    version=1.8.11
    compounddef
    {
        id=enclave_8h
        kind=file
        language=C++
        compoundname
        {
            chars="enclave.h"
        }
        includes
        {
            local=yes
            chars="defs.h"
        }
        includes
        {
            local=yes
            chars="types.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/defs.h"
        }
        includes
        {
            local=yes
            chars="result.h"
        }
        includes
        {
            local=yes
            chars="thread.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/types.h"
        }
        includes
        {
            local=yes
            chars="typeinfo.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/result.h"
        }
        includes
        {
            local=yes
            chars="atomic.h"
        }
        includes
        {
            local=yes
            chars="sha.h"
        }
        incdepgraph
        {
            node
            {
                id=12
                label
                {
                    chars="sha.h"
                }
            }
            node
            {
                id=8
                label
                {
                    chars="/root/openenclave/include/openenclave/types.h"
                }
            }
            node
            {
                id=9
                label
                {
                    chars="typeinfo.h"
                }
            }
            node
            {
                id=6
                label
                {
                    chars="result.h"
                }
            }
            node
            {
                id=5
                label
                {
                    chars="/root/openenclave/include/openenclave/defs.h"
                }
            }
            node
            {
                id=3
                label
                {
                    chars="defs.h"
                }
            }
            node
            {
                id=11
                label
                {
                    chars="atomic.h"
                }
            }
            node
            {
                id=10
                label
                {
                    chars="/root/openenclave/include/openenclave/result.h"
                }
            }
            node
            {
                id=4
                label
                {
                    chars="types.h"
                }
            }
            node
            {
                id=2
                label
                {
                    chars="/root/openenclave/include/openenclave/enclave.h"
                }
                link
                {
                    refid=enclave.h
                }
                childnode
                {
                    refid=3
                    relation=include
                }
                childnode
                {
                    refid=4
                    relation=include
                }
                childnode
                {
                    refid=5
                    relation=include
                }
                childnode
                {
                    refid=6
                    relation=include
                }
                childnode
                {
                    refid=7
                    relation=include
                }
                childnode
                {
                    refid=8
                    relation=include
                }
                childnode
                {
                    refid=9
                    relation=include
                }
                childnode
                {
                    refid=10
                    relation=include
                }
                childnode
                {
                    refid=11
                    relation=include
                }
                childnode
                {
                    refid=12
                    relation=include
                }
            }
            node
            {
                id=7
                label
                {
                    chars="thread.h"
                }
            }
        }
        sectiondef
        {
            kind=define
            memberdef
            {
                kind=define
                id=enclave_8h_1a446fd9dde5f0bb30b684c01ef7ed1dbf
                prot=public
                static=no
                name
                {
                    chars="OE_BUILD_ENCLAVE"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=21
                    column=10
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=21
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a17442f9c583fe8a12b684c9e4146b9e5
                prot=public
                static=no
                name
                {
                    chars="OE_ECALL"
                }
                initializer
                {
                    chars="OE_EXPORT __attribute__((section (".ecall")))"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=27
                    column=11
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=27
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a55c5504c4406dc840191fe066bcf063e
                prot=public
                static=no
                name
                {
                    chars="OE_REPORT_DATA_SIZE"
                }
                initializer
                {
                    chars="64"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=30
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=30
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a38cb9b14ddef3a1143fdc84a6d199bcb
                prot=public
                static=no
                name
                {
                    chars="OE_MAX_ECALLS"
                }
                initializer
                {
                    chars="1024"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=32
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=32
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a16a9d9cfbebae7af4254140b01b588c8
                prot=public
                static=no
                name
                {
                    chars="OE_MAX_OCALLS"
                }
                initializer
                {
                    chars="1024"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=33
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=33
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_a1df224cdefe0cfb6726a3c55dbf51ef9_1a1df224cdefe0cfb6726a3c55dbf51ef9
                prot=public
                static=no
                name
                {
                    chars="OE_Assert"
                }
                param
                {
                    defname
                    {
                        chars="EXPR"
                    }
                }
                initializer
                {
                    chars="do \\n    { \\n        if (!(EXPR)) \\n            __OE_AssertFail(#EXPR, __FILE__, __LINE__, __FUNCTION__); \\n    } \\n    while (0)"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=418
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=418
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=typedef
            memberdef
            {
                kind=typedef
                id=enclave_8h_1a923cf176aae96b897d7b0b54f506a9ad
                prot=public
                static=no
                type
                {
                    chars="void(*"
                }
                definition
                {
                    chars="typedef void(* OE_ECallFunction) (uint64_t argIn, uint64_t *argOut)"
                }
                argsstring
                {
                    chars=")(uint64_t argIn, uint64_t *argOut)"
                }
                name
                {
                    chars="OE_ECallFunction"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=35
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=35
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=func
            memberdef
            {
                kind=function
                id=enclave_8h_aece7da9aeffed24f8be4f4b599c193ff_1aece7da9aeffed24f8be4f4b599c193ff
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_EXPORT void"
                }
                definition
                {
                    chars="OE_EXPORT void OE_Constructor"
                }
                argsstring
                {
                    chars="(void)"
                }
                name
                {
                    chars="OE_Constructor"
                }
                param
                {
                    type
                    {
                        chars="void"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="The enclave constructor function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="The enclave constructor function is called after enclave creation when the enclave is entered for the first time. Enclaves may optionally include a definition to this function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=47
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a2c5467663b98a8413cf2dff6e4be9d38_1a2c5467663b98a8413cf2dff6e4be9d38
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_EXPORT void"
                }
                definition
                {
                    chars="OE_EXPORT void OE_Destructor"
                }
                argsstring
                {
                    chars="(void)"
                }
                name
                {
                    chars="OE_Destructor"
                }
                param
                {
                    type
                    {
                        chars="void"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="The enclave destructor function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="The enclave destructor function is called when an enclave is terminated by the host. Enclaves may optionally include a definition to this function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=56
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a9613c7919aaabdd63711d0b12d286a13_1a9613c7919aaabdd63711d0b12d286a13
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_OCall"
                }
                argsstring
                {
                    chars="(uint32_t func, uint64_t argIn, uint64_t *argOut)"
                }
                name
                {
                    chars="OE_OCall"
                }
                param
                {
                    type
                    {
                        chars="uint32_t"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="uint64_t"
                    }
                    declname
                    {
                        chars="argIn"
                    }
                }
                param
                {
                    type
                    {
                        chars="uint64_t *"
                    }
                    declname
                    {
                        chars="argOut"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Perform a low-level host function call (OCALL)."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="func"
                        }
                        verbatim
                        {
                            chars="void (*)(uint64_t argIn, uint64_t* argOut);"
                        }
                        chars="This function performs a low-level host function call by invoking the function indicated by the  parameter. The host defines and registers a corresponding function with the following signature."
                    }
                    para
                    {
                        bold
                        {
                            chars="argIn"
                        }
                        bold
                        {
                            chars="argOut"
                        }
                        chars="The meaning of the  arg  parameters is defined by the implementer of the function and either may be null."
                    }
                    para
                    {
                        ref
                        {
                            refid=enclave_8h_a3f4d990cf1e916d65a82481a55aafbf4_1a3f4d990cf1e916d65a82481a55aafbf4
                            kindref=member
                            chars="OE_CallHost()"
                        }
                        chars="OpenEnclave uses this interface to implement internal calls. Enclave application developers are encouraged to use  instead."
                    }
                    para
                    {
                        bold
                        {
                            chars="OCALL"
                        }
                        bold
                        {
                            chars="ORET"
                        }
                        chars="At the software layer, this function sends an  message to the enclave and waits for an  message. Note that the OCALL implementation may call back into the enclave (an ECALL) before returning."
                    }
                    para
                    {
                        bold
                        {
                            chars="ENCLU.EEXIT"
                        }
                        bold
                        {
                            chars="ENCLU.EENTER"
                        }
                        chars="At the hardware layer, this function executes the  instruction to exit the enclave. When the host returns from the OCALL, it executes the  instruction to reenter the enclave and resume execution."
                    }
                    para
                    {
                        chars="Note that the return value only indicates whether the OCALL was called not whether it was successful. The ECALL implementation must define its own error reporting scheme based on its parameters."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="func"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of the function to be called."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="argsIn"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The input argument passed to the function."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="argsIn"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The output argument passed back from the function."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OK"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function was successful."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_FAILED"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function failed."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_INVALID_PARAMETER"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="One or more parameters is invalid."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OUT_OF_THREADS"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="No enclave threads are available to make the call."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_UNEXPECTED"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="An unexpected error occurred."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=97
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a3f4d990cf1e916d65a82481a55aafbf4_1a3f4d990cf1e916d65a82481a55aafbf4
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_CallHost"
                }
                argsstring
                {
                    chars="(const char *func, void *args)"
                }
                name
                {
                    chars="OE_CallHost"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="args"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Perform a high-level enclave function call (OCALL)."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="func"
                        }
                        verbatim
                        {
                            chars="OE_OCALL void (*)(void* args);"
                        }
                        chars="Call the host function whose name is given by the  parameter. The host must define a corresponding function with the following prototype."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="The meaning of the  parameter is defined by the implementer of the function and may be null."
                    }
                    para
                    {
                        ref
                        {
                            refid=host_8h_af10a19642d3955cab59d4fe273323f3d_1af10a19642d3955cab59d4fe273323f3d
                            kindref=member
                            chars="OE_ECall()"
                        }
                        bold
                        {
                            chars="OE_FUNC_CALL_HOST"
                        }
                        chars="This function is implemented using the low-level  interface where the function number is given by the  constant."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="Note that the return value of this function only indicates the success of the call and not of the underlying function. The OCALL implementation must define its own error reporting scheme based on ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="func"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The name of the enclave function that will be called."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="args"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The arguments to be passed to the enclave function."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="OE_OK"
                                }
                                chars="This function return  on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=127
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a1a810b4ba3bc63e3ad982fe49a7ed91d_1a1a810b4ba3bc63e3ad982fe49a7ed91d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_RegisterECall"
                }
                argsstring
                {
                    chars="(uint32_t func, OE_ECallFunction ecall)"
                }
                name
                {
                    chars="OE_RegisterECall"
                }
                param
                {
                    type
                    {
                        chars="uint32_t"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="OE_ECallFunction"
                    }
                    declname
                    {
                        chars="ecall"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Registers a low-level ECALL function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            ref
                            {
                                refid=host_8h_af10a19642d3955cab59d4fe273323f3d_1af10a19642d3955cab59d4fe273323f3d
                                kindref=member
                                chars="OE_ECall()"
                            }
                        }
                        verbatim
                        {
                            chars="void (*)(uint64_t argIn, uint64_t* argOut);"
                        }
                        chars="This function registers a low-level ECALL function that may be called from the host by the  function. The registered function has the following prototype."
                    }
                    para
                    {
                        chars="This interface is intended mainly for internal use and developers are encouraged to use the high-level interface instead."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="func"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of the function to be called."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ecall"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The address of the function to be called."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OK"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function was successful."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OUT_OF_RANGE"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function number was greater than OE_MAX_ECALLS."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_ALREADY_IN_USE"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The function number is already in use."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=151
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a02ef8b20b64a998bb97dfbdddb0c6ba5_1a02ef8b20b64a998bb97dfbdddb0c6ba5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="bool"
                }
                definition
                {
                    chars="bool OE_IsWithinEnclave"
                }
                argsstring
                {
                    chars="(const void *ptr, size_t size)"
                }
                name
                {
                    chars="OE_IsWithinEnclave"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Check whether the given buffer is strictly within the enclave."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="ptr"
                        }
                        bold
                        {
                            chars="size"
                        }
                        chars="Check whether the buffer given by the  and  parameters is strictly within the enclave's memory. If so, return true. If any portion of the buffer lies outside the enclave's memory, return false."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The pointer pointer to buffer."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The size of buffer"
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="true"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The buffer is strictly within the enclave."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="false"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="At least some part of the buffer is outside the enclave."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=169
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a33b395779e9fe73102bfe728261917a6_1a33b395779e9fe73102bfe728261917a6
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="bool"
                }
                definition
                {
                    chars="bool OE_IsOutsideEnclave"
                }
                argsstring
                {
                    chars="(const void *ptr, size_t size)"
                }
                name
                {
                    chars="OE_IsOutsideEnclave"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Check whether the given buffer is strictly outside the enclave."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="ptr"
                        }
                        bold
                        {
                            chars="size"
                        }
                        chars="Check whether the buffer given by the  and  parameters is strictly outside the enclave's memory. If so, return true. If any portion of the buffer lies within the enclave's memory, return false."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The pointer to buffer."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The size of buffer."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="true"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The buffer is strictly outside the enclave."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="false"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="At least some part of the buffer is within the enclave."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=187
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ab4b70d7070180862df4e92b590fc941d_1ab4b70d7070180862df4e92b590fc941d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_Result"
                }
                definition
                {
                    chars="OE_Result OE_GetReportForRemoteAttestation"
                }
                argsstring
                {
                    chars="(const uint8_t reportData[OE_REPORT_DATA_SIZE], void *report, size_t *reportSize)"
                }
                name
                {
                    chars="OE_GetReportForRemoteAttestation"
                }
                param
                {
                    type
                    {
                        chars="const uint8_t"
                    }
                    declname
                    {
                        chars="reportData"
                    }
                    array
                    {
                        chars="[OE_REPORT_DATA_SIZE]"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="report"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t *"
                    }
                    declname
                    {
                        chars="reportSize"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Get a report for use in remote attestation."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function is experimental and is likely to change."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=196
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a501a4416e8e702f358c2c9a2f2db0085_1a501a4416e8e702f358c2c9a2f2db0085
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="size_t"
                }
                definition
                {
                    chars="size_t OE_Strlen"
                }
                argsstring
                {
                    chars="(const char *s)"
                }
                name
                {
                    chars="OE_Strlen"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="s"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard strlen() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for strlen() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=206
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_aadd1c980d0964072b06c924a6571589a_1aadd1c980d0964072b06c924a6571589a
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_Strcmp"
                }
                argsstring
                {
                    chars="(const char *s1, const char *s2)"
                }
                name
                {
                    chars="OE_Strcmp"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="s1"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="s2"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard strcmp() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for strcmp() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=213
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a6a6de71dcece7c98bd97e0a1d16787a8_1a6a6de71dcece7c98bd97e0a1d16787a8
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="size_t"
                }
                definition
                {
                    chars="size_t OE_Strlcpy"
                }
                argsstring
                {
                    chars="(char *dest, const char *src, size_t size)"
                }
                name
                {
                    chars="OE_Strlcpy"
                }
                param
                {
                    type
                    {
                        chars="char *"
                    }
                    declname
                    {
                        chars="dest"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="src"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard strlcpy() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for strlcpy() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=220
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a110fd4262b8ef3f490167ea4fc90835b_1a110fd4262b8ef3f490167ea4fc90835b
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="size_t"
                }
                definition
                {
                    chars="size_t OE_Strlcat"
                }
                argsstring
                {
                    chars="(char *dest, const char *src, size_t size)"
                }
                name
                {
                    chars="OE_Strlcat"
                }
                param
                {
                    type
                    {
                        chars="char *"
                    }
                    declname
                    {
                        chars="dest"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="src"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard strlcat() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for strlcat() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=227
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a9a5f74272bec8ad2a6ed9f72262d79c7_1a9a5f74272bec8ad2a6ed9f72262d79c7
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_Memcpy"
                }
                argsstring
                {
                    chars="(void *dest, const void *src, size_t n)"
                }
                name
                {
                    chars="OE_Memcpy"
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="dest"
                    }
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="src"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="n"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard memcpy() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for memcpy() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=234
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ae24bfe0db16cb4f14dadf5c0e8e1642d_1ae24bfe0db16cb4f14dadf5c0e8e1642d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_Memset"
                }
                argsstring
                {
                    chars="(void *s, int c, size_t n)"
                }
                name
                {
                    chars="OE_Memset"
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="s"
                    }
                }
                param
                {
                    type
                    {
                        chars="int"
                    }
                    declname
                    {
                        chars="c"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="n"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard memset() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for memset() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=241
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a28c68a9d56437166de29345a2ad2346c_1a28c68a9d56437166de29345a2ad2346c
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_Memcmp"
                }
                argsstring
                {
                    chars="(const void *s1, const void *s2, size_t n)"
                }
                name
                {
                    chars="OE_Memcmp"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="s1"
                    }
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="s2"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="n"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard memcmp() function."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Refer to documentation for memcmp() function."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=248
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a6b091c1631b6fcd1826c4e7eaac12f0a_1a6b091c1631b6fcd1826c4e7eaac12f0a
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_Vsnprintf"
                }
                argsstring
                {
                    chars="(char *str, size_t size, const char *fmt, OE_va_list ap)"
                }
                name
                {
                    chars="OE_Vsnprintf"
                }
                param
                {
                    type
                    {
                        chars="char *"
                    }
                    declname
                    {
                        chars="str"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="fmt"
                    }
                }
                param
                {
                    type
                    {
                        chars="OE_va_list"
                    }
                    declname
                    {
                        chars="ap"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Produce output according to a given format string."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        itemizedlist
                        {
                            listitem
                            {
                                para
                                {
                                    chars=""%s""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%u""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%d""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%x""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%lu""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%ld""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%lx""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%zu""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%zd""
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars=""%p""
                                }
                            }
                        }
                        chars="This function is similar to vsnprintf() but has limited support for format types. It only supports the following without width specifiers."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="str"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Write output to this string"
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="str"
                                        }
                                        chars="The size of  parameter."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="fmt"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The limited printf style format."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="size"
                                }
                                chars="The number of characters that would be written excluding the zero-terminator. If this value is greater or equal to , then the string was truncated."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=275
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a278cf78b75ffd7901c00248ae2a655c7_1a278cf78b75ffd7901c00248ae2a655c7
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_Snprintf"
                }
                argsstring
                {
                    chars="(char *str, size_t size, const char *fmt,...)"
                }
                name
                {
                    chars="OE_Snprintf"
                }
                param
                {
                    type
                    {
                        chars="char *"
                    }
                    declname
                    {
                        chars="str"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="fmt"
                    }
                }
                param
                {
                    type
                    {
                        chars="..."
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Produce output according to a given format string."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        ref
                        {
                            refid=enclave_8h_a6b091c1631b6fcd1826c4e7eaac12f0a_1a6b091c1631b6fcd1826c4e7eaac12f0a
                            kindref=member
                            chars="OE_Vsnprintf()"
                        }
                        chars="This function is similar to snprintf() but has limited support for format types. See  for details on these limits."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="str"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Write output to this string."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="str"
                                        }
                                        chars="The size of  parameter."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="fmt"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The limited printf style format."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="size"
                                }
                                chars="The number of characters that would be written excluding the zero-terminator. If this value is greater or equal to , then the string was truncated."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=293
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a3593f7245e4dfc759435d3815eeccf51_1a3593f7245e4dfc759435d3815eeccf51
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_HostPrintf"
                }
                argsstring
                {
                    chars="(const char *fmt,...)"
                }
                name
                {
                    chars="OE_HostPrintf"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="fmt"
                    }
                }
                param
                {
                    type
                    {
                        chars="..."
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Print formatted characters to the host's console."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        ref
                        {
                            refid=enclave_8h_a6b091c1631b6fcd1826c4e7eaac12f0a_1a6b091c1631b6fcd1826c4e7eaac12f0a
                            kindref=member
                            chars="OE_Vsnprintf()"
                        }
                        chars="This function writes formatted characters to the host console. Is is based on , which has limited support for format types."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="fmt"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The limited printf style format."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="The number of characters that were written."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=307
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a1c0f1e4f4f25df87c37777a5ef9fa8c7_1a1c0f1e4f4f25df87c37777a5ef9fa8c7
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="OE_ALWAYS_INLINE OE_INLINE void *"
                }
                definition
                {
                    chars="OE_ALWAYS_INLINE OE_INLINE void* OE_StackAlloc"
                }
                argsstring
                {
                    chars="(size_t size, size_t alignment)"
                }
                name
                {
                    chars="OE_StackAlloc"
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="alignment"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Allocates space on the stack frame of the caller."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="size"
                        }
                        bold
                        {
                            chars="alignment"
                        }
                        chars="This function allocates  bytes of space on the stack frame of the caller. The returned address will be a multiple of  (if non-zero). The allocated space is automatically freed when the calling function returns. If the stack overflows, the behavior is undefined."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of bytes to allocate."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="alignment"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The alignment requirement (see above)."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns the address of the allocated space."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=323
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=323
                    bodyend=333
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_aba7207f5f5dd14d9e740548dd8b6b3fd_1aba7207f5f5dd14d9e740548dd8b6b3fd
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_HostMalloc"
                }
                argsstring
                {
                    chars="(size_t size)"
                }
                name
                {
                    chars="OE_HostMalloc"
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Allocate bytes from the host's heap."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="size"
                        }
                        ref
                        {
                            refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                            kindref=member
                            chars="OE_HostFree()"
                        }
                        chars="This function allocates  bytes from the host's heap and returns the address of the allocated memory. The implementation performs an OCALL to the host, which calls malloc(). To free the memory, it must be passed to ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of bytes to be allocated."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="The allocated memory or NULL if unable to allocate the memory."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=348
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a135af92bdf694591e1de1f8a61054511_1a135af92bdf694591e1de1f8a61054511
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_HostCalloc"
                }
                argsstring
                {
                    chars="(size_t nmemb, size_t size)"
                }
                name
                {
                    chars="OE_HostCalloc"
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="nmemb"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Allocate zero-filled bytes from the host's heap."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="size"
                        }
                        ref
                        {
                            refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                            kindref=member
                            chars="OE_HostFree()"
                        }
                        chars="This function allocates  bytes from the host's heap and fills it with zero character. It returns the address of the allocated memory. The implementation performs an OCALL to the host, which calls calloc(). To free the memory, it must be passed to ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of bytes to be allocated and zero-filled."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="The allocated memory or NULL if unable to allocate the memory."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=363
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void OE_HostFree"
                }
                argsstring
                {
                    chars="(void *ptr)"
                }
                name
                {
                    chars="OE_HostFree"
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Releases allocated memory."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        ref
                        {
                            refid=enclave_8h_aba7207f5f5dd14d9e740548dd8b6b3fd_1aba7207f5f5dd14d9e740548dd8b6b3fd
                            kindref=member
                            chars="OE_HostMalloc()"
                        }
                        ref
                        {
                            refid=enclave_8h_a135af92bdf694591e1de1f8a61054511_1a135af92bdf694591e1de1f8a61054511
                            kindref=member
                            chars="OE_HostCalloc()"
                        }
                        chars="This function releases memory allocated with  or  by performing an OCALL where the host calls free()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Pointer to memory to be released or null."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=374
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ad209d33cb2de70ea70aee5a167a02d03_1ad209d33cb2de70ea70aee5a167a02d03
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="char *"
                }
                definition
                {
                    chars="char* OE_HostStrdup"
                }
                argsstring
                {
                    chars="(const char *str)"
                }
                name
                {
                    chars="OE_HostStrdup"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="str"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Make a heap copy of a string."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="str"
                        }
                        chars="This function allocates memory on the host's heap, copies the  parameter to that memory, and returns a pointer to the newly allocated memory."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="str"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The string to be copied."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="A pointer to the newly allocated string or NULL if unable to allocate the storage."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=388
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a8e55d0688551186025aae154d22249b5_1a8e55d0688551186025aae154d22249b5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void OE_Abort"
                }
                argsstring
                {
                    chars="(void)"
                }
                name
                {
                    chars="OE_Abort"
                }
                param
                {
                    type
                    {
                        chars="void"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Abort execution by causing and illegal instruction exception."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function aborts execution by executing the UD2 instruction."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=395
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ae655f9a81dc40863b43a681793b277f9_1ae655f9a81dc40863b43a681793b277f9
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_Sbrk"
                }
                argsstring
                {
                    chars="(ptrdiff_t increment)"
                }
                name
                {
                    chars="OE_Sbrk"
                }
                param
                {
                    type
                    {
                        chars="ptrdiff_t"
                    }
                    declname
                    {
                        chars="increment"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard Unix sbrk() system call."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="increment"
                        }
                        ref
                        {
                            refid=enclave_8h_ae655f9a81dc40863b43a681793b277f9_1ae655f9a81dc40863b43a681793b277f9
                            kindref=member
                            chars="OE_Sbrk()"
                        }
                        chars="This function provides an enclave equivalent to the sbrk() system call. It increments the current end of the heap by  bytes. Calling  with an increment of 0, returns the current end of the heap."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="increment"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Number of bytes to increment the heap end by."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="increment"
                                }
                                chars="The old end of the heap (before the increment) or NULL if there are less than  bytes left on the heap."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=410
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_1afb7d4049a4bc01b8e5ba49741e447a16
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void __OE_AssertFail"
                }
                argsstring
                {
                    chars="(const char *expr, const char *file, int line, const char *func)"
                }
                name
                {
                    chars="__OE_AssertFail"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="expr"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="file"
                    }
                }
                param
                {
                    type
                    {
                        chars="int"
                    }
                    declname
                    {
                        chars="line"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=412
                    column=1
                }
            }
        }
        briefdescription
        {
            para
            {
                chars="This file defines the programming interface for developing enclaves."
            }
        }
        detaileddescription
        {
        }
        programlisting
        {
            codeline
            {
                lineno=1
            }
            codeline
            {
                lineno=7
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndef_OE_ENCLAVE_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=8
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#define_OE_ENCLAVE_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=9
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=10
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"defs.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=11
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"types.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=12
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"result.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=13
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"thread.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=14
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"typeinfo.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=15
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"atomic.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=16
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"sha.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=17
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=18
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_BEGIN"
                }
            }
            codeline
            {
                lineno=19
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=20
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndefOE_BUILD_ENCLAVE"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=21
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_BUILD_ENCLAVE"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=22
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#endif"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=23
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=24
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifdef__cplusplus"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=25
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_ECALLOE_EXTERNCOE_EXPORT__attribute__((section(".ecall")))"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=26
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#else"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=27
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_ECALLOE_EXPORT__attribute__((section(".ecall")))"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=28
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#endif"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=29
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=30
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_REPORT_DATA_SIZE64"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=31
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=32
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_MAX_ECALLS1024"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=33
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_MAX_OCALLS1024"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=34
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=35
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="void(*OE_ECallFunction)("
                }
            }
            codeline
            {
                lineno=36
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_targIn,"
                }
            }
            codeline
            {
                lineno=37
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_t*argOut);"
                }
            }
            codeline
            {
                lineno=38
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=47
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_EXPORT"
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_aece7da9aeffed24f8be4f4b599c193ff_1aece7da9aeffed24f8be4f4b599c193ff
                        kindref=member
                        chars="OE_Constructor"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    chars=");"
                }
            }
            codeline
            {
                lineno=48
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=56
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_EXPORT"
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a2c5467663b98a8413cf2dff6e4be9d38_1a2c5467663b98a8413cf2dff6e4be9d38
                        kindref=member
                        chars="OE_Destructor"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    chars=");"
                }
            }
            codeline
            {
                lineno=57
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=97
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a9613c7919aaabdd63711d0b12d286a13_1a9613c7919aaabdd63711d0b12d286a13
                        kindref=member
                        chars="OE_OCall"
                    }
                    chars="OE_Result("
                }
            }
            codeline
            {
                lineno=98
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint32_tfunc,"
                }
            }
            codeline
            {
                lineno=99
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_targIn,"
                }
            }
            codeline
            {
                lineno=100
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_t*argOut);"
                }
            }
            codeline
            {
                lineno=101
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=127
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a3f4d990cf1e916d65a82481a55aafbf4_1a3f4d990cf1e916d65a82481a55aafbf4
                        kindref=member
                        chars="OE_CallHost"
                    }
                    chars="OE_Result("
                }
            }
            codeline
            {
                lineno=128
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*func,"
                }
            }
            codeline
            {
                lineno=129
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*args);"
                }
            }
            codeline
            {
                lineno=130
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=151
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a1a810b4ba3bc63e3ad982fe49a7ed91d_1a1a810b4ba3bc63e3ad982fe49a7ed91d
                        kindref=member
                        chars="OE_RegisterECall"
                    }
                    chars="OE_Result("
                }
            }
            codeline
            {
                lineno=152
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint32_tfunc,"
                }
            }
            codeline
            {
                lineno=153
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ECallFunctionecall);"
                }
            }
            codeline
            {
                lineno=154
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=169
                highlight
                {
                    class=keywordtype
                    chars="bool"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a02ef8b20b64a998bb97dfbdddb0c6ba5_1a02ef8b20b64a998bb97dfbdddb0c6ba5
                        kindref=member
                        chars="OE_IsWithinEnclave"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=170
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*ptr,"
                }
            }
            codeline
            {
                lineno=171
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=172
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=187
                highlight
                {
                    class=keywordtype
                    chars="bool"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a33b395779e9fe73102bfe728261917a6_1a33b395779e9fe73102bfe728261917a6
                        kindref=member
                        chars="OE_IsOutsideEnclave"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=188
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*ptr,"
                }
            }
            codeline
            {
                lineno=189
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=190
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=196
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ab4b70d7070180862df4e92b590fc941d_1ab4b70d7070180862df4e92b590fc941d
                        kindref=member
                        chars="OE_GetReportForRemoteAttestation"
                    }
                    chars="OE_Result("
                }
            }
            codeline
            {
                lineno=197
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint8_treportData[OE_REPORT_DATA_SIZE],"
                }
            }
            codeline
            {
                lineno=198
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*report,"
                }
            }
            codeline
            {
                lineno=199
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*reportSize);"
                }
            }
            codeline
            {
                lineno=200
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=206
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a501a4416e8e702f358c2c9a2f2db0085_1a501a4416e8e702f358c2c9a2f2db0085
                        kindref=member
                        chars="OE_Strlen"
                    }
                    chars="("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*s);"
                }
            }
            codeline
            {
                lineno=207
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=213
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_aadd1c980d0964072b06c924a6571589a_1aadd1c980d0964072b06c924a6571589a
                        kindref=member
                        chars="OE_Strcmp"
                    }
                    chars="("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*s1,"
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*s2);"
                }
            }
            codeline
            {
                lineno=214
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=220
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a6a6de71dcece7c98bd97e0a1d16787a8_1a6a6de71dcece7c98bd97e0a1d16787a8
                        kindref=member
                        chars="OE_Strlcpy"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*dest,"
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*src,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=221
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=227
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a110fd4262b8ef3f490167ea4fc90835b_1a110fd4262b8ef3f490167ea4fc90835b
                        kindref=member
                        chars="OE_Strlcat"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*dest,"
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*src,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=228
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=234
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a9a5f74272bec8ad2a6ed9f72262d79c7_1a9a5f74272bec8ad2a6ed9f72262d79c7
                        kindref=member
                        chars="OE_Memcpy"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*dest,"
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*src,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="n);"
                }
            }
            codeline
            {
                lineno=235
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=241
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ae24bfe0db16cb4f14dadf5c0e8e1642d_1ae24bfe0db16cb4f14dadf5c0e8e1642d
                        kindref=member
                        chars="OE_Memset"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*s,"
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="c,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="n);"
                }
            }
            codeline
            {
                lineno=242
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=248
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a28c68a9d56437166de29345a2ad2346c_1a28c68a9d56437166de29345a2ad2346c
                        kindref=member
                        chars="OE_Memcmp"
                    }
                    chars="("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*s1,"
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*s2,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="n);"
                }
            }
            codeline
            {
                lineno=249
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=275
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a6b091c1631b6fcd1826c4e7eaac12f0a_1a6b091c1631b6fcd1826c4e7eaac12f0a
                        kindref=member
                        chars="OE_Vsnprintf"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*str,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="size,"
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*fmt,OE_va_listap);"
                }
            }
            codeline
            {
                lineno=276
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=292
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_PRINTF_FORMAT(3,4)"
                }
            }
            codeline
            {
                lineno=293
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a278cf78b75ffd7901c00248ae2a655c7_1a278cf78b75ffd7901c00248ae2a655c7
                        kindref=member
                        chars="OE_Snprintf"
                    }
                    chars="int("
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*str,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="size,const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*fmt,...);"
                }
            }
            codeline
            {
                lineno=294
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=306
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_PRINTF_FORMAT(1,2)"
                }
            }
            codeline
            {
                lineno=307
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a3593f7245e4dfc759435d3815eeccf51_1a3593f7245e4dfc759435d3815eeccf51
                        kindref=member
                        chars="OE_HostPrintf"
                    }
                    sp
                    {
                    }
                    chars="(const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*fmt,...);"
                }
            }
            codeline
            {
                lineno=308
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=323
                refid=enclave_8h_a1c0f1e4f4f25df87c37777a5ef9fa8c7_1a1c0f1e4f4f25df87c37777a5ef9fa8c7
                refkind=member
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_ALWAYS_INLINEOE_INLINE"
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a1c0f1e4f4f25df87c37777a5ef9fa8c7_1a1c0f1e4f4f25df87c37777a5ef9fa8c7
                        kindref=member
                        chars="OE_StackAlloc"
                    }
                    chars="*("
                }
            }
            codeline
            {
                lineno=324
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="size,"
                }
            }
            codeline
            {
                lineno=325
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="alignment)"
                }
            }
            codeline
            {
                lineno=326
                highlight
                {
                    class=normal
                    chars="{"
                }
            }
            codeline
            {
                lineno=327
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*ptr=__builtin_alloca(size+alignment);"
                }
            }
            codeline
            {
                lineno=328
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=329
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordflow
                    chars="if"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="(alignment)"
                }
            }
            codeline
            {
                lineno=330
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="ptr=("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*)(((uint64_t)ptr+alignment-1)/alignment*alignment);"
                }
            }
            codeline
            {
                lineno=331
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=332
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordflow
                    chars="return"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="ptr;"
                }
            }
            codeline
            {
                lineno=333
                highlight
                {
                    class=normal
                    chars="}"
                }
            }
            codeline
            {
                lineno=334
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=348
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_aba7207f5f5dd14d9e740548dd8b6b3fd_1aba7207f5f5dd14d9e740548dd8b6b3fd
                        kindref=member
                        chars="OE_HostMalloc"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=349
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=363
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a135af92bdf694591e1de1f8a61054511_1a135af92bdf694591e1de1f8a61054511
                        kindref=member
                        chars="OE_HostCalloc"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="nmemb,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=364
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=374
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                        kindref=member
                        chars="OE_HostFree"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*ptr);"
                }
            }
            codeline
            {
                lineno=375
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=388
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ad209d33cb2de70ea70aee5a167a02d03_1ad209d33cb2de70ea70aee5a167a02d03
                        kindref=member
                        chars="OE_HostStrdup"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*str);"
                }
            }
            codeline
            {
                lineno=389
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=395
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a8e55d0688551186025aae154d22249b5_1a8e55d0688551186025aae154d22249b5
                        kindref=member
                        chars="OE_Abort"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    chars=");"
                }
            }
            codeline
            {
                lineno=396
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=410
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ae655f9a81dc40863b43a681793b277f9_1ae655f9a81dc40863b43a681793b277f9
                        kindref=member
                        chars="OE_Sbrk"
                    }
                    sp
                    {
                    }
                    chars="*(ptrdiff_tincrement);"
                }
            }
            codeline
            {
                lineno=411
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=412
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="__OE_AssertFail("
                }
            }
            codeline
            {
                lineno=413
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*expr,"
                }
            }
            codeline
            {
                lineno=414
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*file,"
                }
            }
            codeline
            {
                lineno=415
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="line,"
                }
            }
            codeline
            {
                lineno=416
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*func);"
                }
            }
            codeline
            {
                lineno=417
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=418
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_Assert(EXPR)\"
                }
            }
            codeline
            {
                lineno=419
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="do\"
                }
            }
            codeline
            {
                lineno=420
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="{\"
                }
            }
            codeline
            {
                lineno=421
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="if(!(EXPR))\"
                }
            }
            codeline
            {
                lineno=422
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="__OE_AssertFail(#EXPR,__FILE__,__LINE__,__FUNCTION__);\"
                }
            }
            codeline
            {
                lineno=423
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="}\"
                }
            }
            codeline
            {
                lineno=424
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="while(0)"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=425
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=426
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_END"
                }
            }
            codeline
            {
                lineno=427
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=428
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#endif"
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*_OE_ENCLAVE_H*/"
                }
                highlight
                {
                    class=preprocessor
                }
            }
        }
        location
        {
            file=/root/openenclave/include/openenclave/enclave.h
        }
    }
}
